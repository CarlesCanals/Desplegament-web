1708132376
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3A8780519cb7ea0597f0392c2dd4c45086-79f7231eaff2168f7719bdf050cc16a2
s:14144:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"79f7231eaff2168f7719bdf050cc16a2";s:39:" phpDocumentor\Reflection\Php\File name";s:10:"Header.php";s:39:" phpDocumentor\Reflection\Php\File path";s:10:"Header.php";s:41:" phpDocumentor\Reflection\Php\File source";s:6939:"<?php

class Header {
    
    public function mostrarHeader() {
        echo '<!DOCTYPE html>
              <html lang="es">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
                <title>Centro de Formación Profesional</title>
                <!-- Enlace a Bootstrap desde su repositorio remoto -->
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
                
                <style>
                    body {
                        margin-bottom: 70px; /* Ajusta la altura del footer fijo */
                        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; /* Utiliza Helvetica como tipografía predeterminada */
                    }
                    .footer {
                        position: fixed;
                        bottom: 0;
                        width: 100%;
                        background-color: #343a40; /* Color de fondo del footer */
                        color: white; /* Color del texto del footer */
                        padding: 10px 0; /* Espaciado interno del footer */
                    }
                    .navbar-custom {
                        background-color: #37541d !important; /* Cambia el color de fondo del encabezado a blanco */
                        color: #343a40 !important; /* Cambia el color del texto del encabezado a oscuro */
                        padding: 15px 0; /* Ajusta el espaciado interno del encabezado */
                    }
                    .navbar-custom .navbar-nav .nav-link {
                        color: #ffffff !important; /* Cambia el color del texto del menú a oscuro */
                    }
                    
                    /* Estilos adicionales para personalizar el carrusel */
                        #carrusel-container {
                        margin-top: 50px;
                    }
                    .carousel-inner {
                        position: relative;
                        width: 100%;
                        overflow: hidden;
                        height: 150px;
                      }
                </style>
              </head>
              <body>';
        
        

        // 
        echo '<header class="container-fluid navbar-custom">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <a href="Principal.php"><img src="https://paucasesnovescifp.cat/wp-content/uploads/2023/11/cropped-logo_PAU_AENOR_OK.png" alt="Logo del Pau" class="img-fluid" style="max-height: 50px;"></a>
                        </div>
                        <div class="col-6 text-end">
                            <nav class="navbar navbar-expand-lg navbar-dark">
                                <div class="container-fluid">
                                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                                        <span class="navbar-toggler-icon"></span>
                                    </button>
                                    <div class="collapse navbar-collapse" id="navbarNav">
                                        <ul class="navbar-nav">
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Inici</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Centre</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Oferta formativa</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Alumnat</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Profesorat</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" href="#">Contacte</a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
              </header>';
        
        echo '<div class="container" id="carrusel-container">
    <div id="carrusel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="https://img.freepik.com/free-vector/template-banner-online-store-with-shopping-cart-with-purchases-boxes-delivery-from-supermarket-vector-illustration_548887-104.jpg?w=2000&t=st=1701788835~exp=1701789435~hmac=d35b956865746e2f32a7e1b93733a0614acb1eb01e9180747eb1bac78024eb0c" class="d-block w-100" alt="Imagen 1" style="margin-top:-200px">
            </div>
            <div class="carousel-item">
                <img src="https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX31859615.jpg" class="d-block w-100" alt="Imagen 2" style="margin-top:-100px">
            </div>
            <div class="carousel-item">
                <img src="https://static.vecteezy.com/system/resources/thumbnails/004/299/815/small/online-shopping-on-phone-buy-sell-business-digital-web-banner-application-money-advertising-payment-ecommerce-illustration-search-vector.jpg" class="d-block w-100" alt="Imagen 3" style="margin-top:-200px">
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carrusel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Anterior</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carrusel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Siguiente</span>
        </button>
    </div>
</div>';
    }

    
}

$cap = new Header();
$cap->mostrarHeader();

?>
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:7:"\Header";O:35:"phpDocumentor\Reflection\Php\Class_":14:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:7:"\Header";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"Header";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ readOnly";b:0;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";N;s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:1:{s:24:"\Header::mostrarHeader()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Header::mostrarHeader()";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"mostrarHeader";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:5;s:47:" phpDocumentor\Reflection\Location columnNumber";i:35;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:118;s:47:" phpDocumentor\Reflection\Location columnNumber";i:6871;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:3;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:121;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";